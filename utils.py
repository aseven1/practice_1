import base64
import io
from typing import List
from typing import Optional
from typing import Union

from telegram import CallbackQuery
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import ReplyKeyboardMarkup
from telegram import Update
from telegram.ext import CallbackContext
from telegram.ext import ConversationHandler
from telegram.ext import MessageFilter

import rating
import reviews
import students


def send_message(update: Update, context: CallbackContext, text: str, photo: Optional[bytes] = None,
                 reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup]] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if photo:
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo, caption=text, reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)


def add_student(update: Update, context: CallbackContext) -> None:
    """–ó–∞–Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î"""
    data = context.user_data['user']

    photo_stream = io.BytesIO()
    update.message.photo[-1].get_file().download(out=photo_stream)
    photo = base64.b64encode(photo_stream.getvalue())

    students.add_student(
        student_id=data['id'],
        name=data['name'],
        surname=data['surname'],
        u_group=data['u_group'],
        phone_number=data['phone_number'],
        photo=photo.decode()
    )
    del context.user_data['user']


def send_student_info(update: Update, context: CallbackContext, student: students.Student) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_info = f"{student.name} {student.surname}\n{student.u_group}"
    student_photo = base64.b64decode(student.photo) if student.photo else None
    reply_markup = get_student_markup(student_id=student.id)
    send_message(update=update, context=context, text=student_info, photo=student_photo, reply_markup=reply_markup)


def get_student_markup(student_id: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_rating = rating.get_student_rating(student_id)

    likes = sum([int(rate.likes) for rate in student_rating])
    dislikes = sum([int(rate.dislikes) for rate in student_rating])

    keyboard = [
        [
            InlineKeyboardButton(f"üëç {likes}", callback_data=f'rate {student_id} likes'),
            InlineKeyboardButton(f"üëé {dislikes}", callback_data=f'rate {student_id} dislikes'),
        ],
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f'review {student_id}')],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data=f'get_reviews {student_id}')]
    ]
    return InlineKeyboardMarkup(keyboard)


def update_rating(update: Update, query: CallbackQuery, message: List[str], **_) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É"""
    student_id = int(message[1])
    rating.update_rating(student_id=student_id, from_id=update.effective_chat.id, rate=message[2] == "likes")
    reply_markup = get_student_markup(student_id=student_id)
    query.edit_message_reply_markup(reply_markup)


def request_review(update: Update, context: CallbackContext, message: List[str], **_) -> str:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    context.user_data['student_id'] = message[1]
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    send_message(update=update, context=context, text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å",
                 reply_markup=reply_markup)
    return 'SUBMIT'


def get_reviews(update: Update, context: CallbackContext, message: List[str], **_) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    student_reviews = reviews.get_reviews(student_id=int(message[1]))
    if not student_reviews:
        send_message(update=update, context=context, text="–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ–± —ç—Ç–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ")
        return

    for review in student_reviews:
        reply_markup = get_review_markup(update=update, review=review)
        send_message(update=update, context=context, text=review.message, reply_markup=reply_markup)


def delete_review(query: CallbackQuery, message: List[str], **_) -> None:
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    reviews.delete_review(int(message[1]))
    query.delete_message()


def cancel_review(context: CallbackContext, query: CallbackQuery, **_) -> str:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    query.delete_message()
    del context.user_data['student_id']
    return ConversationHandler.END


def get_review_markup(update: Update, review: reviews.Review) -> Union[InlineKeyboardMarkup, None]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    reply_markup = None
    if update.effective_chat.id == review.from_id:
        keyboard = [[InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete {review.id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup


class FilterNotAuthorized(MessageFilter):
    """–§–∏–ª—å—Ç—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É """
    def filter(self, message):
        return not students.get_student(message.chat_id)
